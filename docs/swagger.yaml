basePath: /api
definitions:
  server.AgifyData:
    properties:
      age:
        type: integer
      count:
        type: integer
      name:
        type: string
    type: object
  server.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  server.HTTPError:
    properties:
      message:
        type: string
    type: object
  server.UserResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  server.WeatherData:
    properties:
      main:
        properties:
          temp:
            type: number
        type: object
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /agify/{name}:
    get:
      consumes:
      - application/json
      description: Age prediction based on age
      parameters:
      - description: your name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.AgifyData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: getAgify
      tags:
      - agify
  /hello:
    get:
      description: test api and sending hello world
      produces:
      - application/json
      responses:
        "200":
          description: hello world
          schema:
            type: string
      summary: helloHandler
  /user:
    get:
      description: this is handler for fetch users
      produces:
      - application/json
      responses:
        "200":
          description: test message
          schema:
            type: string
      summary: fetchUser
      tags:
      - users
  /user/{id}:
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: getUserByID
      tags:
      - users
  /weather/{city}:
    get:
      consumes:
      - application/json
      description: Get the weather for a city
      parameters:
      - description: city name
        in: path
        name: city
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.WeatherData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: getWeatherByCity
      tags:
      - weather
swagger: "2.0"
